Index: db/const.txt
===================================================================
--- db/const.txt	(revision 14212)
+++ db/const.txt	(working copy)
@@ -224,6 +224,7 @@
 mf_nochat	43
 mf_noexppenalty	44
 mf_guildlock	45
+mf_no_damage	46
 
 cell_walkable	0
 cell_shootable	1
Index: src/map/battle.c
===================================================================
--- src/map/battle.c	(revision 14212)
+++ src/map/battle.c	(working copy)
@@ -301,7 +302,7 @@
 		return 1;
 
 	if (skill_num == PA_PRESSURE)
-		return damage; //This skill bypass everything else.
+		return ((sd) && (map[sd->bl.m].flag.no_damage)) ? 0 : damage; //This skill bypass everything, execept no_damage mapflag
 
 	if( sc && sc->count )
 	{
@@ -529,7 +530,7 @@
 			mobskill_event((TBL_MOB*)bl,src,gettick(),MSC_SKILLUSED|(skill_num<<16));
 	}
 
-	return damage;
+	return ((sd) && (map[sd->bl.m].flag.no_damage)) ? 0 : damage;
 }
 
 /*==========================================
@@ -741,7 +742,7 @@
 			break;
 	}
 
-	return damage;
+	return ((sd) && (map[sd->bl.m].flag.no_damage)) ? 0 : damage;
 }
 /*==========================================
  * Calculates the standard damage of a normal attack assuming it hits,
@@ -839,7 +840,7 @@
 				damage += damage*sd->weapon_atk_rate[sd->weapontype1]/100;;
 		}
 	}
-	return damage;
+	return ((sd) && (map[sd->bl.m].flag.no_damage)) ? 0 : damage;
 }
 
 /*==========================================
Index: src/map/map.h
===================================================================
--- src/map/map.h	(revision 14212)
+++ src/map/map.h	(working copy)
@@ -467,6 +467,7 @@
 		unsigned partylock :1;
 		unsigned guildlock :1;
 		unsigned src4instance : 1; // To flag this map when it's used as a src map for instances
+		unsigned no_damage :1;
 	} flag;
 	struct point save;
 	struct npc_data *npc[MAX_NPC_PER_MAP];
Index: src/map/npc.c
===================================================================
--- src/map/npc.c	(revision 14212)
+++ src/map/npc.c	(working copy)
@@ -3017,6 +3017,8 @@
 		map[m].flag.partylock=state;
 	else if (!strcmpi(w3,"guildlock"))
 		map[m].flag.guildlock=state;
+	else if (!strcmpi(w3,"no_damage"))
+		map[m].flag.no_damage=state;
 	else
 		ShowError("npc_parse_mapflag: unrecognized mapflag '%s' (file '%s', line '%d').\n", w3, filepath, strline(buffer,start-buffer));
 
Index: src/map/script.c
===================================================================
--- src/map/script.c	(revision 14212)
+++ src/map/script.c	(working copy)
@@ -9181,6 +9181,7 @@
 			case MF_NOCHAT:			script_pushint(st,map[m].flag.nochat); break;
 			case MF_PARTYLOCK:		script_pushint(st,map[m].flag.partylock); break;
 			case MF_GUILDLOCK:		script_pushint(st,map[m].flag.guildlock); break;
+			case MF_NO_DAMAGE:		script_pushint(st,map[m].flag.no_damage); break;
 		}
 	}
 
@@ -9245,6 +9246,7 @@
 			case MF_NOCHAT:        map[m].flag.nochat=1; break;
 			case MF_PARTYLOCK:     map[m].flag.partylock=1; break;
 			case MF_GUILDLOCK:     map[m].flag.guildlock=1; break;
+			case MF_NO_DAMAGE:     map[m].flag.no_damage=1; break;
 		}
 	}
 
@@ -9306,6 +9308,7 @@
 			case MF_NOCHAT:        map[m].flag.nochat=0; break;
 			case MF_PARTYLOCK:     map[m].flag.partylock=0; break;
 			case MF_GUILDLOCK:     map[m].flag.guildlock=0; break;
+			case MF_NO_DAMAGE:     map[m].flag.no_damage=0; break;
 		}
 	}
 
