Index: conf/battle/battle.conf
===================================================================
--- conf/battle/battle.conf	(revision 14207)
+++ conf/battle/battle.conf	(working copy)
@@ -165,3 +165,7 @@
 //     skill is weapon-based and used with ranged weapons (auto-guesses which 
 //     skills should consume ammo when it's acquired via a card or plagiarize)
 arrow_decrement: 1
+
+// How much percent to reduce in mapflags (NOte 2)
+// that have reduced_damage mapflag:
+reduced_damage: 0
Index: db/const.txt
===================================================================
--- db/const.txt	(revision 14207)
+++ db/const.txt	(working copy)
@@ -224,6 +224,7 @@
 mf_nochat	43
 mf_noexppenalty	44
 mf_guildlock	45
+mf_damage_reduced	46
 
 cell_walkable	0
 cell_shootable	1
Index: src/map/battle.c
===================================================================
--- src/map/battle.c	(revision 14207)
+++ src/map/battle.c	(working copy)
@@ -839,6 +839,8 @@
 				damage += damage*sd->weapon_atk_rate[sd->weapontype1]/100;;
 		}
 	}
+	if (map[sd->bl.m].flag.damage_reduced)    
+        damage -= battle_config.damage_reduced_percent/100 * damage;
 	return damage;
 }
 
@@ -3846,6 +3848,7 @@
 	{ "bg_magic_attack_damage_rate",        &battle_config.bg_magic_damage_rate,            60,     0,      INT_MAX,        },
 	{ "bg_misc_attack_damage_rate",         &battle_config.bg_misc_damage_rate,             60,     0,      INT_MAX,        },
 	{ "bg_flee_penalty",                    &battle_config.bg_flee_penalty,                 20,     0,      INT_MAX,        },
+	{ "damage_reduced",                     &battle_config.damage_reduced,                  50,     0,      100,            },
 };
 
 
Index: src/map/map.h
===================================================================
--- src/map/map.h	(revision 14207)
+++ src/map/map.h	(working copy)
@@ -467,6 +467,7 @@
 		unsigned partylock :1;
 		unsigned guildlock :1;
 		unsigned src4instance : 1; // To flag this map when it's used as a src map for instances
+		unsigned reduced_damage :1;
 	} flag;
 	struct point save;
 	struct npc_data *npc[MAX_NPC_PER_MAP];
Index: src/map/npc.c
===================================================================
--- src/map/npc.c	(revision 14207)
+++ src/map/npc.c	(working copy)
@@ -3017,6 +3017,8 @@
 		map[m].flag.partylock=state;
 	else if (!strcmpi(w3,"guildlock"))
 		map[m].flag.guildlock=state;
+	else if (!strcmpi(w3,"damage_reduced"))
+		map[m].flag.damage_reduced=state;
 	else
 		ShowError("npc_parse_mapflag: unrecognized mapflag '%s' (file '%s', line '%d').\n", w3, filepath, strline(buffer,start-buffer));
 
Index: src/map/script.c
===================================================================
--- src/map/script.c	(revision 14207)
+++ src/map/script.c	(working copy)
@@ -9181,6 +9181,7 @@
 			case MF_NOCHAT:			script_pushint(st,map[m].flag.nochat); break;
 			case MF_PARTYLOCK:		script_pushint(st,map[m].flag.partylock); break;
 			case MF_GUILDLOCK:		script_pushint(st,map[m].flag.guildlock); break;
+			case MF_DAMAGE_REDUCED:		script_pushint(st,map[m].flag.damage_reduced); break;
 		}
 	}
 
@@ -9245,6 +9246,7 @@
 			case MF_NOCHAT:        map[m].flag.nochat=1; break;
 			case MF_PARTYLOCK:     map[m].flag.partylock=1; break;
 			case MF_GUILDLOCK:     map[m].flag.guildlock=1; break;
+			case MF_DAMAGE_REDUCED: map[m].flag.damage_reduced=1; break;
 		}
 	}
 
@@ -9306,6 +9308,7 @@
 			case MF_NOCHAT:        map[m].flag.nochat=0; break;
 			case MF_PARTYLOCK:     map[m].flag.partylock=0; break;
 			case MF_GUILDLOCK:     map[m].flag.guildlock=0; break;
+			case MF_DAMAGE_REDUCED: map[m].flag.damage_reduced=0; break;
 		}
 	}
 
